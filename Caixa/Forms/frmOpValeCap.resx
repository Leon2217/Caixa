<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAA=
</value>
  </data>
</root>